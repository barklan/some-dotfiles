[user]
	email = qufiwefefwoyn@gmail.com
	name = Gleb Buzin
	signingkey = /home/barklan/.ssh/personal.pub
[core]
	excludesfile = /home/barklan/.gitignore
    pager = delta
    untrackedCache = true
    commitGraph = true
    ; NOTE: fsmonitor not available on Linux rn
    ; fsmonitor = true
[url "ssh://git@gitlab.org.ru/"]
	insteadOf = https://gitlab.org.ru/
[alias]
    default-branch-name = !git branch -l master main release | sed -r 's/^[* ] //' | head -n 1
	; s = !clear && git status --show-stash
    s = status --show-stash
    staged-files-with-unstaged-changes = !git status -s | awk '/MM / { print $2 }'

	# LOG
	; l = !clear && git log --oneline --graph --abbrev-commit --all --decorate -20
    l = !git fetch-main && echo && printf '%s' 'Divergent commits: ' && git rev-list $(git default-branch-name)..@ --count  && echo '--------------------' && git log --pretty=format:'%C(auto)%h%d%Creset %C(cyan)(%cr)%Creset %C(green)%cn %Creset %s' --decorate --graph --first-parent @ --first-parent -50 $(git default-branch-name) -- && echo '...'

    ls = !git fetch-main && echo && printf '%s' 'Divergent commits: ' && git rev-list stage..@ --count  && echo '--------------------' && git log --pretty=format:'%C(auto)%h%d%Creset %C(cyan)(%cr)%Creset %C(green)%cn %Creset %s' --decorate --graph --first-parent @ --first-parent -100 stage -- && echo '...'

    ll = !git fetch-main && echo && printf '%s' 'Divergent commits: ' && git rev-list $(git default-branch-name)..@ --count  && echo '--------------------' && git log --decorate --stat --graph --oneline --first-parent @ --first-parent -20 $(git default-branch-name) -- && echo '...'

    lll = !git fetch-main && echo && printf '%s' 'Divergent commits: ' && git rev-list $(git default-branch-name)..@ --count  && echo '--------------------' && git log --decorate --summary --stat --graph --first-parent @ --first-parent -20 $(git default-branch-name) -- && echo '...'

	la = !clear && git log --oneline --graph --abbrev-commit --all --decorate
    lf = log -p --follow --stat
	lm = !clear && git log --oneline --first-parent $(git default-branch-name)

    lr = !clear && git log --first-parent --oneline --decorate --graph

	# BRANCH
	b = branch -v
	ba = branch -a -v
	abandon-branch = !fish ~/sys/git-abandon-branch.fish
    notify-behind = !bash ~/sys/git-notify-behind.sh

	# Diff
    # TODO: forgit commands changed
	d = !fish -ic 'forgit::diff'
    diffs = diff --minimal -M -C --summary --stat
	diffm = !git difftool --minimal -d $(git default-branch-name) "$(git branch --show-current)"
    diffms = !git diff --minimal --stat -M -C --summary $(git default-branch-name) "$(git branch --show-current)"

	# CHECKOUT & SWITCH
	co = forgit checkout_branch
    sw = switch
    com = !bash ~/sys/git-checkout-default.sh
	coc = !fish -ic 'forgit::checkout::commit'
	cot = !fish -ic 'forgit::checkout::tag'

	# FETCH
	# Fetch main while on different branch
    fetch-main = !BRANCH="$(git default-branch-name)" git fetch origin $BRANCH:$BRANCH
    fm = fetch-main

    fetch-main-safe = !bash ~/sys/git_fetch_main_safe.sh

	# ADD
	# a = add
	a = !fish -ic 'forgit::add'
	aa = add --all

	# COMMIT
	smart = !bash ~/sys/git-smart-commit.sh
	sm = !bash ~/sys/git-smart-commit.sh
    smart-prep = !bash ~/sys/git-smart-prepare.sh
	amend = commit --amend --no-edit
	; fake = !MY_TIME=$(date --date=\"120 days ago\" -R) GIT_AUTHOR_DATE=$MY_TIME GIT_COMMITTER_DATE=$MY_TIME git commit
	dumb = !git add --all && git commit --amend --no-edit && git push --force-with-lease
    go = !git smart-prep && git commit -m 'fixup!' && git push

	# PUSH
	ph = push
    ph-crt = !bash -c 'ALL_PROXY=socks5h://127.0.0.1:2080 git push'
	phf = push --force-with-lease --force-if-includes
    ; php = push --prune --all

    # Github
	pr-new = !yes | gh pr create -a @me --fill
    pr-browse = !gh pr view -w
    pr-review = !git rbm && git pr-new
    pr-done = !bash -ic ~/sys/git-gh-done.sh

	# Gitlab
    dev = !fish ~/sys/git-dev.fish
	mr = !fish ~/sys/git-mr.fish $1
	phgl = push -u origin @ -o merge_request.create -o merge_request.assign="barklan"
	phglmerge = push -u origin @ -o merge_request.create -o merge_request.assign="barklan" -o merge_request.merge_when_pipeline_succeeds
	phglci = push -u origin @ -o merge_request.create -o merge_request.label="CI/CD" -o merge_request.assign="barklan"

	# REBASE
	rbm = !git fetch --all && git rebase "origin/$(git default-branch-name)" -i

	# RESTORE
	; rs = restore --staged

	# MISC
    o = open
    changes = !standard-changelog
	changelogen = !npx changelogen@latest --from=main
    reset-main = !git checkout main && git fetch origin && git reset --hard @{u}
    reset-release = !git checkout release && git fetch origin && git reset --hard @{u}
    release = !standard-version --skip.changelog --no-verify --sign

	# to delete all unstaged files ignoring .gitignore files
	cleantree = clean -i -d

	grep-all = !~/sys/git-grep-all.py
	grep-msg = !bash ~/sys/git-grep-msg.sh
[commit]
	gpgsign = true
[tag]
	gpgSign = true
[merge]
	tool = vscode
	conflictstyle = zdiff3
[mergetool "vscode"]
    cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED
[diff]
    colorMoved = default
    ; tool = kompare
    tool = kitty
    guitool = kitty.gui
[difftool]
    prompt = false
    trustExitCode = true
[difftool "kitty"]
    cmd = kitten diff $LOCAL $REMOTE
[difftool "kitty.gui"]
    cmd = kitten diff $LOCAL $REMOTE
[difftool "vscode-diff"]
    cmd = code --wait --diff $LOCAL $REMOTE
[difftool "kompare"]
    cmd = kompare "$LOCAL" "$REMOTE"
[init]
	defaultBranch = main
[fetch]
    writeCommitGraph = true
    prune = true
	prunetags = true
[push]
	followTags = true
    default = current
[pull]
	ff = only
	default = current
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[advice]
    statusHints = false
[delta]
	navigate = true
	light = false
	; side-by-side = true
[rebase]
	autosquash = true
    updateRefs = false
[rerere]
	enabled = true
[gpg]
	format = ssh
[log]
	; date = iso
	date = human
[stash]
	showPatch = true
[protocol]
	version = 2
